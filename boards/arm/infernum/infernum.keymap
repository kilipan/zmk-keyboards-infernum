#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define APT 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4


&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};

/ {
    macros {
        macro_shiftable_sch: macro_shiftable_sch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp S
                    &macro_release &kp RSHIFT
                    &macro_tap &kp C &kp H
            >;
            tap-ms = <10>;
        };
    };
};


#define COMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};
#define SLOWCOMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <40>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};
#define TCOMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};

//    _________________________________________________________________
//   /   0 /   1 /   2 /   3 /   4 |  5  |   6 \   7 \   8 \   9 \  10 \
//  /  11 /  12 /  13 /  14 /  15  |     |   16 \  17 \  18 \  19 \  20 \
// /  21 /  22 /  23 /  24 /  25 |         |  26 \  27 \  28 \  29 \  30 \
// ---------|  31  |  32  |   33   | ENC |   34   |  35  |  36  |---------

/{
    combos {
        compatible = "zmk,combos";
/* usually on base layer */
        COMBO(q, &kp Q, 2 3)
        COMBO(v, &kp V, 1 2)
        COMBO(z, &kp Z, 22 23)
        COMBO(shiftablesch, &macro_shiftable_sch, 1 3)
        COMBO(enter, &kp ENTER, 27 29)
        COMBO(esc, &kp ESC, 23 24)
        COMBO(semi, &kp SEMICOLON, 28 34)
        COMBO(colon, &kp COLON, 29 34)
        COMBO(minus, &kp MINUS, 27 28)
        COMBO(slash, &kp SLASH, 28 29)
/* parentheticals */
        COMBO(lbrc, &kp LBRC, 1 12)
        COMBO(lbkt, &kp LBKT, 2 13)
        COMBO(lpar, &kp LPAR, 3 14)
        COMBO(lt, &kp LT, 4 15)
        COMBO(rt, &kp GT, 6 16)
        COMBO(rpar, &kp RPAR, 7 16)
        COMBO(rbkt, &kp RBKT, 8 17)
        COMBO(rbrc, &kp RBRC, 9 18)
/* caps */
        COMBO(caps, &caps_word, 14 17)
        COMBO(capslock, &kp CAPSLOCK, 1 9)
/* deletion */
        COMBO(bspc, &kp BSPC, 7 8)
        SLOWCOMBO(del, &kp DEL, 8 9)
        COMBO(delword, &kp LC(BSPC), 7 9)
    };
};

//    _________________________________________________________________
//   /   0 /   1 /   2 /   3 /   4 |  5  |   6 \   7 \   8 \   9 \  10 \
//  /  11 /  12 /  13 /  14 /  15  |     |   16 \  17 \  18 \  19 \  20 \
// /  21 /  22 /  23 /  24 /  25 |         |  26 \  27 \  28 \  29 \  30 \
// ---------|  31  |  32  |   33   | ENC |   34   |  35  |  36  |---------

/ {
    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <6 7 8 9 10 16 17 18 19 20 26 27 28 29 30 31 32 33 34 35 36>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 4 11 12 13 14 15 21 22 23 24 25 31 32 33 34 35 36>;
        };

        my_lt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <160>;
            quick-tap-ms = <100>;
            bindings = <&mo &kp>, <&kp>;
        };
        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};


/ {
    keymap {
        compatible = "zmk,keymap";

        aptmak {
            bindings = <
                &none          &kp W          &kp F          &kp P          &kp B            &kp C_MUTE  &kp J          &kp L          &kp U          &kp Y          &none
                &hl LCTRL R    &hl LALT S     &hl LGUI T     &hl LSHFT H    &hl RALT K                   &hr RALT X     &hr RSHFT N    &hr RGUI A     &hr LALT I     &hr RCTRL O
                &none          &kp C          &kp G          &kp D          &kp C_VOL_DN                 &kp C_VOL_UP   &kp M          &comsem        &dotcol        &none
                                              &none          &my_lt NUM SQT &my_lt NAV SPACE &kp C_MUTE  &my_lt SYM E   &my_lt FUN TAB &none
            >;
        };
        numbers {
            bindings = <
                &none          &none          &none          &none          &none            &trans      &none          &kp N7         &kp N8         &kp N9         &none
                &hl LCTRL PLUS &hl LALT MINUS &hl LGUI STAR  &hl LSHFT SLASH &none                       &none          &kp N4         &kp N5         &kp N6         &dotcol
                &none          &kp N9         &kp N8         &kp N7         &none                        &none          &kp N1         &kp N2         &kp N3         &none
                                              &trans         &trans         &trans           &trans      &kp E          &kp N0         &none
            >;
        };
        navigation {
            bindings = <
                &none          &none          &none          &none          &none            &trans      &none          &trans         &trans         &trans         &none
                &sk LCTRL      &sk LALT       &sk LGUI       &sk LSHFT      &none                        &none          &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT
                &none          &kp C_AC_COPY  &kp C_AC_CUT   &kp C_AC_PASTE &none                        &none          &kp HOME       &kp C_MUTE     &kp END        &none
                                              &none          &trans         &trans           &trans      &kp C_VOL_DN   &kp C_VOL_UP   &none
            >;
        };
        symbols {
            bindings = <
                &none          &none          &none          &none          &none            &trans      &none          &trans         &trans         &trans         &none
                &kp EXCL       &kp AT         &kp HASH       &kp DOLLAR     &none                        &none          &kp AMPERSAND  &kp ASTERISK   &kp PERCENT    &kp CARET
                &none          &kp GRAVE      &kp DQT        &kp UNDERSCORE &none                        &none          &kp BACKSLASH  &kp PIPE       &kp EQUAL      &none
                                              &none          &kp TILDE      &trans           &trans      &trans         &trans         &none
            >;
        };
        function {
            bindings = <
                &none          &bootloader    &none          &none          &none            &trans      &none          &kp F7         &kp F8         &kp F9         &none
                &bootloader    &kp F12        &kp F11        &kp F10        &none                        &none          &kp F4         &kp F5         &kp F6         &none
                &none          &kp F9         &kp F8         &kp F7         &none                        &none          &kp F1         &kp F2         &kp F3         &none
                                              &none          &none          &trans           &trans      &trans         &trans         &none
            >;
        };

    };
};
